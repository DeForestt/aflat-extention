{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "AFlat",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#preprocessor"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#comment"
		},
		{
			"include": "#class"
		},
		{
			"include": "#slcomment"
		},
		{
			"include": "#char"
		},
		{
			"include": "#stringFormat"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.aflat",
				"match": "\\b(if|while|for|foreach|class|fn|enum|struct|else|return|new|delete|as|signs|contract|import|from|export|under|break|continue|Apply)\\b"
			},
			{
				"name":"storage.modifier.aflat",
				"match": "\\b(public|private|static|const|mutable|safe|dynamic)\\b"
			},
			{
				"name":"storage.type.aflat",
				"match": "\\b(int|let|adr|char|float|bool|short|long|generic|void|any|byte)\\b"
			},
			{
				"name": "variable",
				"match": "\\b(true|false|NULL)\\b"
			},
			{
				"name": "keyword.operator.aflat",
				"match": "\\b(\\+|\\-|\\*|\\/|\\?|\\#|\\<|\\>|\\=)\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.aflat",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.aflat",
					"match": "\\\\."
				}
			]
		},
		"char": {
			"name":"string.quoted.single",
			"begin":"'",
			"end":"'",
			"patterns": [
				{
					"name": "constant.character.escape.aflat",
					"match": "\\\\."
				}
			]
		},
		"stringFormat": {
			"name":"string.quoted.single",
			"begin":"`",
			"end":"`",
			"patterns": [
				{
					"name": "constant.character.escape.aflat",
					"match": "\\\\."
				},
				{
					"name": "constant.language",
					"begin": "\\{",
					"end": "\\}",
					"patterns": [
						{
							"include": "#keywords"
						},
						{
							"include": "#preprocessor"
						},
						{
							"include": "#strings"
						},
						{
							"include": "#comment"
						},
						{
							"include": "#class"
						},
						{
							"include": "#slcomment"
						},
						{
							"include": "#char"
						},
						{
							"include": "#stringFormat"
						},
						{
							"name":"constant.numeric",
							"match":"\\b[0-9]+\\b"
						}
					]
				}
			]
		},
		"comment":{
			"name":"comment.block",
			"begin":"\\/\\*",
			"end":"\\*\\/"
		},
		"preprocessor":{
			"patterns": [
				{
					"name":"meta.preprocessor",
					"match": "\\b(needs|root)\\b"
				},
				{
					"name":"meta.preprocessor.string",
					"match": "\\<\\S+\\>"
				}
			]
		},
		"slcomment":{
			"name": "comment.line.double-slash",
			"match": "\\/\\/[^\\n]*"
		},
		"function": {
			"patterns": [{
				"name": "entity.name.class.aflat",
				"match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b"
			}]
		}
	},
	"scopeName": "source.aflat"
}